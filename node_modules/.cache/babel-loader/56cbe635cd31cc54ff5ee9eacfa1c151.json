{"ast":null,"code":"var _jsxFileName = \"/Users/hunterhouston/Desktop/action-sports-photography/photo-frontend/src/index.js\";\nimport NavBar from './components/NavBar';\nimport React from 'react';\nimport rootReducer from './reducers/root_reducer';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'; // think about using apolo-client instead of apollo-boost\n\nimport { ApolloClient } from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { loadState, saveState } from './localStorage';\nvar persistedState = loadState();\n\nvar configureStore = function configureStore() {\n  return createStore(rootReducer, persistedState, applyMiddleware(thunk));\n};\n\nvar store = configureStore();\nstore.subscribe(function () {\n  saveState(store.getState());\n});\n\nvar createApolloClient = function createApolloClient() {\n  var cache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new ApolloClient({\n    ssrMode: typeof window !== 'undefined',\n    cache: new InMemoryCache().restore(cache),\n    link: createUploadLink({\n      uri: 'http://localhost:9000/graphql' // uri: 'https://backend.burst.gallery/graphql'\n\n    })\n  });\n};\n\nvar client = createApolloClient();\nReactDOM.render(React.createElement(ApolloProvider, {\n  store: store,\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}, React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}, React.createElement(NavBar, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}), React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51\n  },\n  __self: this\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/hunterhouston/Desktop/action-sports-photography/photo-frontend/src/index.js"],"names":["NavBar","React","rootReducer","createStore","applyMiddleware","thunk","ReactDOM","Root","serviceWorker","Provider","ApolloClient","ApolloProvider","createUploadLink","InMemoryCache","loadState","saveState","persistedState","configureStore","store","subscribe","getState","createApolloClient","cache","ssrMode","window","restore","link","uri","client","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,gBAArC;AAEA,IAAMC,cAAc,GAAGF,SAAS,EAAhC;;AAEA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SACrBd,WAAW,CACTD,WADS,EAETc,cAFS,EAGTZ,eAAe,CAACC,KAAD,CAHN,CADU;AAAA,CAAvB;;AAQA,IAAMa,KAAK,GAAGD,cAAc,EAA5B;AAEAC,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpBJ,EAAAA,SAAS,CAACG,KAAK,CAACE,QAAN,EAAD,CAAT;AACD,CAFD;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,MAACC,KAAD,uEAAS,EAAT;AAAA,SACzB,IAAIZ,YAAJ,CAAiB;AACfa,IAAAA,OAAO,EAAE,OAAOC,MAAP,KAAkB,WADZ;AAEfF,IAAAA,KAAK,EAAE,IAAIT,aAAJ,GAAoBY,OAApB,CAA4BH,KAA5B,CAFQ;AAGfI,IAAAA,IAAI,EAAEd,gBAAgB,CAAC;AACrBe,MAAAA,GAAG,EAAE,+BADgB,CAErB;;AAFqB,KAAD;AAHP,GAAjB,CADyB;AAAA,CAA3B;;AAUA,IAAMC,MAAM,GAAGP,kBAAkB,EAAjC;AAEAf,QAAQ,CAACuB,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,KAAK,EAAEX,KAAvB;AAA8B,EAAA,MAAM,EAAEU,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEV,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CADF,CADF,EAOEY,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF,E,CASA;AACA;AACA;;AACAvB,aAAa,CAACwB,UAAd","sourcesContent":["import NavBar from './components/NavBar'\nimport React from 'react'\nimport rootReducer from './reducers/root_reducer'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Root from './Root'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\n// think about using apolo-client instead of apollo-boost\nimport { ApolloClient } from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport { createUploadLink } from 'apollo-upload-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nimport { loadState, saveState } from './localStorage'\n\nconst persistedState = loadState()\n\nconst configureStore = () => (\n  createStore(\n    rootReducer,\n    persistedState,\n    applyMiddleware(thunk)\n  )\n)\n\nconst store = configureStore()\n\nstore.subscribe(() => {\n  saveState(store.getState())\n})\n\nconst createApolloClient = (cache = {}) =>\n  new ApolloClient({\n    ssrMode: typeof window !== 'undefined',\n    cache: new InMemoryCache().restore(cache),\n    link: createUploadLink({\n      uri: 'http://localhost:9000/graphql'\n      // uri: 'https://backend.burst.gallery/graphql'\n    })\n  })\n\nconst client = createApolloClient()\n\nReactDOM.render(\n  <ApolloProvider store={store} client={client}>\n    <Provider store={store}>\n      <NavBar />\n      <Root />\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"]},"metadata":{},"sourceType":"module"}