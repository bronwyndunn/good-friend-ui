{"ast":null,"code":"var _jsxFileName = \"/Users/hunterhouston/Desktop/action-sports-photography/photo-frontend/src/components/Dropzone/Dropzone.js\";\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nvar Dropzone = function Dropzone(props) {\n  var maxSize = 20000000;\n  var onDrop = useCallback(function (acceptedFiles) {\n    props.getAcceptedFiles(acceptedFiles);\n  }, []);\n\n  var _useDropzone = useDropzone({\n    onDrop: onDrop,\n    minSize: 0,\n    maxSize: maxSize\n  }),\n      isDragActive = _useDropzone.isDragActive,\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps,\n      isDragReject = _useDropzone.isDragReject,\n      acceptedFiles = _useDropzone.acceptedFiles,\n      rejectedFiles = _useDropzone.rejectedFiles;\n\n  var isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n  return React.createElement(\"div\", {\n    className: \"container text-center mt-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })), !isDragActive && 'Click here or drop a file to upload!', isDragActive && !isDragReject && \"Drop it like it's hot!\", isDragReject && 'File type not accepted, sorry!', isFileTooLarge && React.createElement(\"div\", {\n    className: \"text-danger mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"File is too large.\")));\n};\n\nexport default Dropzone;","map":{"version":3,"sources":["/Users/hunterhouston/Desktop/action-sports-photography/photo-frontend/src/components/Dropzone/Dropzone.js"],"names":["React","useCallback","useDropzone","Dropzone","props","maxSize","onDrop","acceptedFiles","getAcceptedFiles","minSize","isDragActive","getRootProps","getInputProps","isDragReject","rejectedFiles","isFileTooLarge","length","size"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,MAAMC,OAAO,GAAG,QAAhB;AACA,MAAMC,MAAM,GAAGL,WAAW,CAAC,UAAAM,aAAa,EAAI;AAC1CH,IAAAA,KAAK,CAACI,gBAAN,CAAuBD,aAAvB;AACD,GAFyB,EAEvB,EAFuB,CAA1B;;AAF0B,qBAMwEL,WAAW,CAAC;AAC5GI,IAAAA,MAAM,EAANA,MAD4G;AAE5GG,IAAAA,OAAO,EAAE,CAFmG;AAG5GJ,IAAAA,OAAO,EAAPA;AAH4G,GAAD,CANnF;AAAA,MAMlBK,YANkB,gBAMlBA,YANkB;AAAA,MAMJC,YANI,gBAMJA,YANI;AAAA,MAMUC,aANV,gBAMUA,aANV;AAAA,MAMyBC,YANzB,gBAMyBA,YANzB;AAAA,MAMuCN,aANvC,gBAMuCA,aANvC;AAAA,MAMsDO,aANtD,gBAMsDA,aANtD;;AAY1B,MAAMC,cAAc,GAAGD,aAAa,CAACE,MAAd,GAAuB,CAAvB,IAA4BF,aAAa,CAAC,CAAD,CAAb,CAAiBG,IAAjB,GAAwBZ,OAA3E;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6CAASM,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,+CAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEG,CAACF,YAAD,IAAiB,sCAFpB,EAGGA,YAAY,IAAI,CAACG,YAAjB,IAAiC,wBAHpC,EAIGA,YAAY,IAAI,gCAJnB,EAKGE,cAAc,IAEX;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAPN,CADF,CADF;AAiBD,CA/BD;;AAiCA,eAAeZ,QAAf","sourcesContent":["import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\n\nconst Dropzone = (props) => {\n  const maxSize = 20000000\n  const onDrop = useCallback(acceptedFiles => {\n    props.getAcceptedFiles(acceptedFiles)\n  }, [])\n\n  const { isDragActive, getRootProps, getInputProps, isDragReject, acceptedFiles, rejectedFiles } = useDropzone({\n    onDrop,\n    minSize: 0,\n    maxSize\n  })\n\n  const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize\n\n  return (\n    <div className='container text-center mt-5'>\n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        {!isDragActive && 'Click here or drop a file to upload!'}\n        {isDragActive && !isDragReject && \"Drop it like it's hot!\"}\n        {isDragReject && 'File type not accepted, sorry!'}\n        {isFileTooLarge &&\n          (\n            <div className='text-danger mt-2'>\n              File is too large.\n            </div>\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Dropzone\n"]},"metadata":{},"sourceType":"module"}